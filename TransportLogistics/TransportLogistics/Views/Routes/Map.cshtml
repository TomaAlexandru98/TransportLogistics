@model TransportLogistics.ViewModels.Routes.RouteEntriesViewModel

@{
    ViewData["Title"] = "ApiTest";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Directions Service</title>
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>

    <div id="map"></div>
    <script>
        var model = @Html.Raw(Json.Serialize(Model));
        var addresses = [];
        for (var i = 0; i < model.routeEntries.length; i++) {
            if (model.routeEntries[i].orderType == 1) {
                var address = {
                    Country: model.routeEntries[i].order.pickUpAddress.country,
                    City: model.routeEntries[i].order.pickUpAddress.city,
                    Street: model.routeEntries[i].order.pickUpAddress.street,
                    StreetNumber: model.routeEntries[i].order.pickUpAddress.streetNumber,
                    stopover:true
                };
                addresses.push(address);
            }
            else if (model.routeEntries[i].orderType == 2){
                var address = {
                    Country: model.routeEntries[i].order.deliveryAddress.country,
                    City: model.routeEntries[i].order.deliveryAddress.city,
                    Street: model.routeEntries[i].order.deliveryAddress.street,
                    StreetNumber: model.routeEntries[i].order.deliveryAddress.streetNumber,
                    stopover:true
                };
                addresses.push(address);
            }
            else {
                var address = {
                    Country: model.routeEntries[i].order.pickUpAddress.country,
                    City: model.routeEntries[i].order.pickUpAddress.city,
                    Street: model.routeEntries[i].order.pickUpAddress.street,
                    StreetNumber: model.routeEntries[i].order.pickUpAddress.streetNumber,
                    stopover: true
                };
                addresses.push(address);
                var address = {
                    Country: model.routeEntries[i].order.deliveryAddress.country,
                    City: model.routeEntries[i].order.deliveryAddress.city,
                    Street: model.routeEntries[i].order.deliveryAddress.street,
                    StreetNumber: model.routeEntries[i].order.deliveryAddress.streetNumber,
                    stopover: true
                };
                addresses.push(address);
            }
        }
        var ordersNumber = addresses.length;
        var wayPoints = [];
        var startAddress = addresses[0];
        var finishAddress = addresses[ordersNumber - 1];
        addresses.pop();
        addresses.shift();
        for (var i = 0; i < addresses.length; i++) {
            var address = {
                location:addresses[i].StreetNumber + " " + addresses[i].Street + "," + addresses[i].City,
                stopover:true
            }
            wayPoints.push(address);
        }
        function initMap() {
            var directionsService = new google.maps.DirectionsService;
            var directionsDisplay = new google.maps.DirectionsRenderer;
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 15,
                center: { lat: 41.85, lng: -87.65 }
            });
            directionsDisplay.setMap(map);
            directionsService.route({
                origin: startAddress.Street + " " + startAddress.StreetNumber+ "," + startAddress.City,
                destination: finishAddress.Street + " " + finishAddress.StreetNumber+ "," + finishAddress.City,
                waypoints: wayPoints,
                travelMode: 'DRIVING'
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCs1-kzxxDx1-X3og2Y54T_RMOQfK10l9Y&callback=initMap">
    </script>
</body>
</html>